def merge_sort(arr):
    # Проверка, что длина массива больше 1 (иначе сортировка не нужна).
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        # Рекурсивный вызов merge_sort для левой и правой половин массива
        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0  # Инициализация индексов для объединения

        # Объединение левой и правой половин в один отсортированный массив
        while i < len(left_half) and j < len(right_half):
            # Сравнение элементов левой и правой половин
            if left_half[i] < right_half[j]:
                # Если элемент из левой меньше, помещаем его в исходный массив
                arr[k] = left_half[i]
                i += 1
            else:
                # Если элемент из правой меньше, помещаем его в исходный массив
                arr[k] = right_half[j]
                j += 1
            k += 1

        # Добавление оставшихся элементов из левой половины (если есть)
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        # Добавление оставшихся элементов из правой половины (если есть)
        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

# Создание неотсортированного массива
my_array = [64, 34, 25, 12, 22, 11, 90]
# Вызов процедуры сортировки слиянием
merge_sort(my_array)
# Вывод отсортированный  массив
print("Отсортированный массив (Merge Sort):", my_array)